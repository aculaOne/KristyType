import { ActivityType, Client, Events } from "discord.js";
import { Commands, GuildCommands } from "../Commands";
import { BOT_GUILD_ID, printLog, randomIntFromInterval } from "../Bot";
import { printLogColorType } from "../utils/console";
import activities from "../db/activities.json"
// import activities from "../db/lbd_activities.json"
import krCodeTranslator from "../utils/krCodeTranslator";

export default (client: Client): void => {
  client.on(Events.ClientReady, async () => {
    // –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è?
    if (!client.user || !client.application) return;

    printLog(`–≤–æ—à–ª–∞... ${client.user.username}... –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Å—å...`);

    // printLog("–Ø –Ω–∞ –≤–æ—Ç —Ç–∞–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö...")
    // client.guilds.cache.forEach(e => {
    //   printLog("  " + e.name, printLogColorType.getSuccess());
    // })

    // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î
    client.application.commands.set(Commands);
    client.application.commands.set(GuildCommands, BOT_GUILD_ID);

    // –°–ú–ï–ù–ê –ù–ê –ü–ï–†–í–ò–ß–ù–´–ô –°–¢–ê–¢–£–°
    client.user.setStatus("dnd");
    client.user?.setActivity("ü¶¢ KristyType", {
      type: ActivityType.Custom,
    });
    printLog(
      `—Å–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å (${client.user.presence.status}), —Å–±—Ä–æ—Å–∏–ª–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∞ –±–∞–∑–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: "${client.user.presence.activities}".`,
    );

    // –ö–ê–ñ–î–´–ï N-–°–ï–ö–£–ù–î–´ –°–ú–ï–ù–Ø–ï–¢ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ò–ó –°–ü–ò–°–ö–ê –ê–ö–¢–í–ò–ù–û–°–¢–ï–ô
    setInterval(
      () => {

        let activity = activities[randomIntFromInterval(0, activities.length - 1)];
        let activityType: ActivityType = 0;
        if (activity.startsWith("playing ")) {
          activity = activity.replace("playing ", "");
          activityType = ActivityType.Playing;
        } else if (activity.startsWith("watching ")) {
          activity = activity.replace("watching ", "");
          activityType = ActivityType.Watching;
        } else if (activity.startsWith("listening ")) {
          activity = activity.replace("listening ", "");
          activityType = ActivityType.Listening;
        } else if (activity.startsWith("competing ")) {
          activity = activity.replace("competing ", "");
          activityType = ActivityType.Competing;
        } else {
          activityType = ActivityType.Custom;
        }

        activity = krCodeTranslator("KrCodeToString", activity, client);

        client.user?.setActivity(activity, {
          type: activityType,
        });

        client.user?.setStatus;
        printLog(`–∏–∑–º–µ–Ω–∏–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ("${activityType}: ${activity}")`);
      },
      (1000 * 60) * 1,
    );

    let allMembersCount: number = 0;
    printLog(
      `–ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞—Å—å –∏ —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! –ö—Å—Ç–∞—Ç–∏, —è –Ω–∞ ${client.guilds.cache.size
      } —Å–µ—Ä–≤–µ—Ä–∞—Ö, –≥–¥–µ –≤ —Å—Ä–µ–¥–Ω–µ–º ~${(
        client.guilds.cache.forEach(
          (g) => {
            allMembersCount += g.memberCount;
          }
        ),
        Math.round(allMembersCount / client.guilds.cache.size)
      )
      } —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`,
      printLogColorType.getSuccess(),
    );
  });
};
